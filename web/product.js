document.addEventListener('DOMContentLoaded', function () {
    console.log("üöÄ [Kh·ªüi ƒë·ªông] Trang ƒë√£ t·∫£i, b·∫Øt ƒë·∫ßu l·∫•y danh s√°ch s·∫£n ph·∫©m...");

    const tableBody = document.querySelector('.user-list tbody'); // V√πng ch·ª©a danh s√°ch s·∫£n ph·∫©m
    const detailPanel = document.getElementById('detailPanel'); // Panel hi·ªÉn th·ªã chi ti·∫øt s·∫£n ph·∫©m
    const closeDetailBtn = document.getElementById('closeDetailBtn'); // N√∫t ƒë√≥ng panel chi ti·∫øt
    const searchInput = document.getElementById('searchInput'); // √î nh·∫≠p t√¨m ki·∫øm
    const searchButton = document.getElementById('searchButton'); // N√∫t t√¨m ki·∫øm

    const API_BASE_URL = 'http://localhost:3000/api/books'; // API Backend l·∫•y danh s√°ch s√°ch

    let allProducts = []; // L∆∞u to√†n b·ªô danh s√°ch s√°ch ƒë·ªÉ t√¨m ki·∫øm nhanh

    // ============================
    // H√ÄM L·∫§Y DANH S√ÅCH S·∫¢N PH·∫®M
    // ============================
    async function fetchProducts() {
        console.log("üì° [API] G·ª≠i y√™u c·∫ßu l·∫•y danh s√°ch s·∫£n ph·∫©m t·ª´:", API_BASE_URL);

        try {
            const response = await fetch(API_BASE_URL);
            console.log("üîÑ [API] ƒêang x·ª≠ l√Ω ph·∫£n h·ªìi t·ª´ server...");

            if (!response.ok) {
                throw new Error(`‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m! (Status: ${response.status})`);
            }

            const data = await response.json();
            console.log("‚úÖ [API] D·ªØ li·ªáu s·∫£n ph·∫©m nh·∫≠n ƒë∆∞·ª£c:", data);

            if (!data || !Array.isArray(data.data)) {
                throw new Error("‚ö†Ô∏è API kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu h·ª£p l·ªá (thi·∫øu 'data')");
            }

            allProducts = data.data; // L∆∞u to√†n b·ªô s·∫£n ph·∫©m ƒë·ªÉ t√¨m ki·∫øm
            renderProducts(allProducts);
        } catch (error) {
            console.error("‚ö†Ô∏è [L·ªói] Kh√¥ng th·ªÉ l·∫•y danh s√°ch s·∫£n ph·∫©m:", error);
        }
    }

    // ============================
    // H√ÄM HI·ªÇN TH·ªä DANH S√ÅCH S√ÅCH
    // ============================
    function renderProducts(products) {
        console.log("üìã [UI] Hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m...");
        tableBody.innerHTML = '';

        if (products.length === 0) {
            tableBody.innerHTML = `<tr><td colspan="4" style="text-align: center;">Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p.</td></tr>`;
            return;
        }

        products.forEach((product) => {
            console.log(`üîπ [UI] Hi·ªÉn th·ªã s·∫£n ph·∫©m: ${product.ten_sach}`);

            const row = document.createElement('tr');

            // H√¨nh ·∫£nh
            const imageCell = document.createElement('td');
            const image = document.createElement('img');
            image.src = product.anh ?
                (product.anh.startsWith('data:image') ? product.anh : `http://localhost:3000/uploads/${product.anh}`)
                : 'default-image.jpg';
            image.alt = product.ten_sach;
            image.width = 50;
            imageCell.appendChild(image);
            row.appendChild(imageCell);

            // T√™n s·∫£n ph·∫©m
            const nameProductCell = document.createElement('td');
            nameProductCell.textContent = product.ten_sach;
            row.appendChild(nameProductCell);

            // N√∫t "Chi ti·∫øt"
            const detailCell = document.createElement('td');
            const detailButton = document.createElement('a');
            detailButton.textContent = 'Chi ti·∫øt';
            detailButton.classList.add('detail-btn');
            detailButton.dataset.id = product._id || 'unknown';
            detailCell.appendChild(detailButton);
            row.appendChild(detailCell);

            // Tr·∫°ng th√°i
            const statusCell = document.createElement('td');
            statusCell.textContent = product.trang_thai ? 'ƒê√£ duy·ªát' : 'Ch·ªù duy·ªát';
            row.appendChild(statusCell);

            tableBody.appendChild(row);
        });

        console.log("‚úÖ [UI] Ho√†n t·∫•t hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m.");

        document.querySelectorAll('.detail-btn').forEach(button => {
            button.addEventListener('click', function () {
                const id = this.dataset.id;
                if (id === 'unknown') {
                    console.error("‚ö†Ô∏è [L·ªói] Kh√¥ng th·ªÉ l·∫•y chi ti·∫øt s·∫£n ph·∫©m v√¨ ID kh√¥ng h·ª£p l·ªá!");
                    return;
                }
                console.log(`üîç [Click] Xem chi ti·∫øt s·∫£n ph·∫©m c√≥ ID: ${id}`);
                fetchProductDetail(id);
            });
        });
    }

    // ============================
    // H√ÄM T√åM KI·∫æM S√ÅCH THEO T√äN
    // ============================
    function searchProducts() {
        const keyword = searchInput.value.trim().toLowerCase();
        console.log(`üîé [T√¨m ki·∫øm] T·ª´ kh√≥a: "${keyword}"`);

        const filteredProducts = allProducts.filter(product =>
            product.ten_sach.toLowerCase().includes(keyword)
        );

        renderProducts(filteredProducts);
    }

    // ============================
    // H√ÄM L·∫§Y CHI TI·∫æT S√ÅCH
    // ============================
    async function fetchProductDetail(id) {
        console.log(`üì° [API] L·∫•y chi ti·∫øt s·∫£n ph·∫©m (ID: ${id})`);

        try {
            const response = await fetch(`${API_BASE_URL}/${id}`);
            console.log("üîÑ [API] ƒêang x·ª≠ l√Ω ph·∫£n h·ªìi...");

            if (!response.ok) {
                throw new Error(`‚ùå Kh√¥ng th·ªÉ l·∫•y chi ti·∫øt s·∫£n ph·∫©m! (Status: ${response.status})`);
            }

            const data = await response.json();
            console.log("‚úÖ [API] D·ªØ li·ªáu chi ti·∫øt s·∫£n ph·∫©m:", data);

            if (!data || !data.data) {
                throw new Error("‚ö†Ô∏è API kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu h·ª£p l·ªá");
            }

            showProductDetail(data.data);
        } catch (error) {
            console.error("‚ö†Ô∏è [L·ªói] Kh√¥ng th·ªÉ l·∫•y chi ti·∫øt s·∫£n ph·∫©m:", error);
        }
    }

    // ============================
    // H√ÄM HI·ªÇN TH·ªä CHI TI·∫æT S√ÅCH
    // ============================
    function showProductDetail(product) {
        console.log(`üìã [UI] Hi·ªÉn th·ªã chi ti·∫øt s·∫£n ph·∫©m: ${product.ten_sach}`);

        document.getElementById('detailImage').src = product.anh ?
            (product.anh.startsWith('data:image') ? product.anh : `http://localhost:3000/uploads/${product.anh}`)
            : 'default-image.jpg';

        document.getElementById('detailName').textContent = product.ten_sach || "Kh√¥ng c√≥ t√™n";
        document.getElementById('detailAuthor').textContent = product.tac_gia || "Kh√¥ng c√≥ t√°c gi·∫£";
        document.getElementById('detailCategory').textContent = product.the_loai?.length ? product.the_loai.map(t => t.ten_the_loai).join(', ') : "Kh√¥ng c√≥";
        document.getElementById('detailPrice').textContent = product.gia ? product.gia + 'ƒë' : "Kh√¥ng c√≥ gi√°";
        document.getElementById('detailDescription').textContent = product.mo_ta || "Kh√¥ng c√≥ m√¥ t·∫£";
        document.getElementById('detailPages').textContent = product.so_trang ? product.so_trang : "Kh√¥ng c√≥ s·ªë trang";
        document.getElementById('detailSize').textContent = product.kich_thuoc || "Kh√¥ng c√≥ k√≠ch th∆∞·ªõc";

        detailPanel.style.display = 'block';
        console.log("‚úÖ [UI] Chi ti·∫øt s·∫£n ph·∫©m hi·ªÉn th·ªã th√†nh c√¥ng.");
    }

    // ============================
    // S·ª∞ KI·ªÜN ƒê√ìNG PANEL CHI TI·∫æT
    // ============================
    closeDetailBtn.addEventListener('click', function () {
        console.log("‚ùå [UI] ƒê√≥ng panel chi ti·∫øt s·∫£n ph·∫©m.");
        detailPanel.style.display = 'none';
    });

    // ============================
    // S·ª∞ KI·ªÜN T√åM KI·∫æM S·∫¢N PH·∫®M
    // ============================
    searchButton.addEventListener('click', searchProducts);
    searchInput.addEventListener('input', searchProducts); // T√¨m ki·∫øm theo th·ªùi gian th·ª±c

    // G·ªçi API l·∫•y danh s√°ch s·∫£n ph·∫©m khi t·∫£i trang
    fetchProducts();
});
