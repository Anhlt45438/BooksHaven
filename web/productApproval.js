document.addEventListener('DOMContentLoaded', function () {
    console.log("üöÄ [Kh·ªüi ƒë·ªông] Trang ƒë√£ t·∫£i, b·∫Øt ƒë·∫ßu l·∫•y danh s√°ch s·∫£n ph·∫©m...");

    const tableBody = document.querySelector('.user-list tbody'); // V√πng ch·ª©a danh s√°ch s·∫£n ph·∫©m
    const detailPanel = document.getElementById('detailPanel'); // Panel hi·ªÉn th·ªã chi ti·∫øt s·∫£n ph·∫©m
    const closeDetailBtn = document.getElementById('closeDetailBtn'); // N√∫t ƒë√≥ng panel chi ti·∫øt
    const searchInput = document.getElementById('searchInput'); // √î nh·∫≠p t√¨m ki·∫øm
    const searchButton = document.getElementById('searchButton'); // N√∫t t√¨m ki·∫øm
    const paginationContainer = document.getElementById('pagination'); // Ph·∫ßn t·ª≠ ph√¢n trang
    const prevButton = document.getElementById('prevPage'); // N√∫t quay l·∫°i
    const nextButton = document.getElementById('nextPage'); // N√∫t ti·∫øp theo
    const currentPageSpan = document.getElementById('currentPage'); // Hi·ªÉn th·ªã s·ªë trang hi·ªán t·∫°i
    const shopNameSpan = document.getElementById('detailShopName');
    const bearerToken = localStorage.getItem("accessToken"); // L·∫•y token t·ª´ localStorage   


    const API_BASE_URL = 'http://14.225.206.60:3000/api/admin/books/inactive'; // API Backend l·∫•y danh s√°ch s√°ch
    const LIMIT = 10;
    let currentPage = 1; // Trang hi·ªán t·∫°i
    let totalPages = 10; // T·ªïng s·ªë trang
    let allProducts = []; // L∆∞u to√†n b·ªô danh s√°ch s√°ch ƒë·ªÉ t√¨m ki·∫øm nhanh

    // ============================
    // H√ÄM L·∫§Y DANH S√ÅCH S·∫¢N PH·∫®M
    // ============================
    async function fetchProducts() {
        const token = localStorage.getItem('accessToken'); // L·∫•y token t·ª´ localStorage
        if (!token) {
            alert("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c!");
            return;
        }

        const url = `${API_BASE_URL}?page=${currentPage}&limit=${LIMIT}`;
        console.log(`üì° [API] G·ª≠i y√™u c·∫ßu l·∫•y danh s√°ch s·∫£n ph·∫©m t·ª´: ${url}`);

        try {
            const response = await fetch(url, {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            console.log("üîÑ [API] ƒêang x·ª≠ l√Ω ph·∫£n h·ªìi t·ª´ server...");

            if (!response.ok) {
                throw new Error(`‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m! (Status: ${response.status})`);
            }

            const data = await response.json();
            console.log("‚úÖ [API] D·ªØ li·ªáu s·∫£n ph·∫©m nh·∫≠n ƒë∆∞·ª£c:", data);

            if (!data || !Array.isArray(data.data)) {
                throw new Error("‚ö†Ô∏è API kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu h·ª£p l·ªá (thi·∫øu 'data')");
            }

            // Ki·ªÉm tra xem pagination c√≥ t·ªìn t·∫°i trong ph·∫£n h·ªìi kh√¥ng
            if (!data.pagination) {
                console.error("‚ö†Ô∏è API kh√¥ng tr·∫£ v·ªÅ th√¥ng tin ph√¢n trang!");
                return;
            }

            allProducts = data.data; // L∆∞u to√†n b·ªô s·∫£n ph·∫©m ƒë·ªÉ t√¨m ki·∫øm
            totalPages = data.pagination.total_pages; // C·∫≠p nh·∫≠t t·ªïng s·ªë trang
            renderProducts(data.data); // Hi·ªÉn th·ªã s·∫£n ph·∫©m
            updatePagination(data.pagination); // C·∫≠p nh·∫≠t giao di·ªán ph√¢n trang

        } catch (error) {
            console.error("‚ö†Ô∏è [L·ªói] Kh√¥ng th·ªÉ l·∫•y danh s√°ch s·∫£n ph·∫©m:", error);
        }
    }



    // ============================
    // H√ÄM HI·ªÇN TH·ªä DANH S√ÅCH S√ÅCH
    // ============================
    async function renderProducts(products) {
        console.log("üìã [UI] Hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m...");
        tableBody.innerHTML = '';

        if (products.length === 0) {
            tableBody.innerHTML = `<tr><td colspan="4" style="text-align: center;">Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p.</td></tr>`;
            return;
        }

        // L·∫∑p qua t·∫•t c·∫£ s·∫£n ph·∫©m v√† render
        for (const product of products) {
            console.log(`üîπ [UI] Hi·ªÉn th·ªã s·∫£n ph·∫©m: ${product.ten_sach}`);

            const row = document.createElement('tr');

            // H√¨nh ·∫£nh
            const imageCell = document.createElement('td');
            const image = document.createElement('img');
            image.src = product.anh ? (product.anh.startsWith('data:image') ? product.anh : `http://14.225.206.60:3000/uploads/${product.anh}`) : 'default-image.jpg';
            image.alt = product.ten_sach;
            image.width = 50;
            imageCell.appendChild(image);
            row.appendChild(imageCell);

            // T√™n s·∫£n ph·∫©m
            const nameProductCell = document.createElement('td');
            nameProductCell.textContent = product.ten_sach;
            row.appendChild(nameProductCell);

            // C·ªôt th√¥ng tin (L·∫•y th√¥ng tin shop v√† gi√° ti·ªÅn)
            const nameProductInfo = document.createElement('td');
            const shopName = await getShopNameById(product.id_shop); // G·ªçi API ƒë·ªÉ l·∫•y t√™n shop
            const price = product.gia ? `${product.gia.toLocaleString()} ƒë` : "Kh√¥ng c√≥ gi√°"; // Hi·ªÉn th·ªã gi√° s√°ch
            nameProductInfo.innerHTML = `${shopName} <br> Gi√°: ${price}`;
            row.appendChild(nameProductInfo);

            // N√∫t "Chi ti·∫øt"
            const detailCell = document.createElement('td');
            const detailButton = document.createElement('a');
            detailButton.textContent = 'Chi ti·∫øt';
            detailButton.classList.add('detail-btn');
            detailButton.dataset.id = product._id || 'unknown';
            detailCell.appendChild(detailButton);
            row.appendChild(detailCell);

            tableBody.appendChild(row);
        }

        console.log("‚úÖ [UI] Ho√†n t·∫•t hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m.");

        // ƒê·∫£m b·∫£o n√∫t chi ti·∫øt ho·∫°t ƒë·ªông
        document.querySelectorAll('.detail-btn').forEach(button => {
            button.addEventListener('click', function () {
                const id = this.dataset.id;
                if (id === 'unknown') {
                    console.error("‚ö†Ô∏è [L·ªói] Kh√¥ng th·ªÉ l·∫•y chi ti·∫øt s·∫£n ph·∫©m v√¨ ID kh√¥ng h·ª£p l·ªá!");
                    return;
                }
                console.log(`üîç [Click] Xem chi ti·∫øt s·∫£n ph·∫©m c√≥ ID: ${id}`);
                fetchProductDetail(id);
            });
        });
    }

    // ============================
    // L·∫§Y TH√îNG TIN SHOP THEO ID
    // ============================
    async function getShopNameById(id_shop) {
        if (!id_shop) {
            console.error("‚ö†Ô∏è [L·ªói] id_shop kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng t·ªìn t·∫°i.");
            return "Kh√¥ng c√≥ shop"; // Tr·∫£ v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ id_shop
        }

        try {
            // G·ª≠i y√™u c·∫ßu API ƒë·ªÉ l·∫•y th√¥ng tin shop
            const response = await fetch(`http://14.225.206.60:3000/api/shops/get-shop-info/${id_shop}`, {
                method: 'POST', // Th·ª±c hi·ªán POST thay v√¨ GET
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ id_shop: id_shop }) // G·ª≠i id_shop trong body (n·∫øu API y√™u c·∫ßu)
            });

            if (!response.ok) {
                throw new Error("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin shop");
            }

            const shopData = await response.json();
            if (shopData && shopData.data) {
                return shopData.data.ten_shop || "Kh√¥ng x√°c ƒë·ªãnh";
            } else {
                return "Kh√¥ng x√°c ƒë·ªãnh";
            }

        } catch (error) {
            console.error("L·ªói khi l·∫•y th√¥ng tin shop:", error);
            return "Kh√¥ng x√°c ƒë·ªãnh"; // Tr·∫£ v·ªÅ th√¥ng b√°o l·ªói n·∫øu kh√¥ng th·ªÉ l·∫•y th√¥ng tin shop
        }
    }


    // ============================
    // H√ÄM L·∫§Y CHI TI·∫æT S√ÅCH
    // ============================
    async function fetchProductDetail(id) {
        console.log(`üì° [API] L·∫•y chi ti·∫øt s·∫£n ph·∫©m (ID: ${id})`);

        try {
            const token = localStorage.getItem('accessToken');
            if (!token) {
                alert("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c!");
                return;
            }

            const response = await fetch(`http://14.225.206.60:3000/api/books/${id}`, {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });
            console.log("üîÑ [API] ƒêang x·ª≠ l√Ω ph·∫£n h·ªìi...");

            if (!response.ok) {
                throw new Error(`‚ùå Kh√¥ng th·ªÉ l·∫•y chi ti·∫øt s·∫£n ph·∫©m! (Status: ${response.status})`);
            }

            const data = await response.json();
            console.log("‚úÖ [API] D·ªØ li·ªáu chi ti·∫øt s·∫£n ph·∫©m:", data);

            if (!data || !data.data) {
                throw new Error("‚ö†Ô∏è API kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu h·ª£p l·ªá");
            }

            showProductDetail(data.data);
        } catch (error) {
            console.error("‚ö†Ô∏è [L·ªói] Kh√¥ng th·ªÉ l·∫•y chi ti·∫øt s·∫£n ph·∫©m:", error);
        }
    }

    // ============================
    // H√ÄM HI·ªÇN TH·ªä CHI TI·∫æT S√ÅCH
    // ============================
    async function showProductDetail(product) {
        console.log(`üìã [UI] Hi·ªÉn th·ªã chi ti·∫øt s·∫£n ph·∫©m: ${product.ten_sach}`);

        document.getElementById('detailImage').src = product.anh ?
            (product.anh.startsWith('data:image') ? product.anh : `http://14.225.206.60:3000/uploads/${product.anh}`)
            : 'default-image.jpg';

        document.getElementById('detailName').textContent = product.ten_sach || "Kh√¥ng c√≥ t√™n";
        document.getElementById('detailAuthor').textContent = product.tac_gia || "Kh√¥ng c√≥ t√°c gi·∫£";
        document.getElementById('detailCategory').textContent = product.the_loai?.length
            ? product.the_loai.map(t => t.ten_the_loai).join(', ')
            : "Kh√¥ng c√≥ th·ªÉ lo·∫°i";
        document.getElementById('detailPrice').textContent = product.gia ? `${product.gia.toLocaleString()}ƒë` : "Kh√¥ng c√≥ gi√°";
        document.getElementById('detailDescription').textContent = product.mo_ta || "Kh√¥ng c√≥ m√¥ t·∫£";
        document.getElementById('detailPages').textContent = product.so_trang || "Kh√¥ng c√≥ s·ªë trang";
        document.getElementById('detailSize').textContent = product.kich_thuoc || "Kh√¥ng c√≥ k√≠ch th∆∞·ªõc";

        // G·ªçi th√™m API ƒë·ªÉ l·∫•y t√™n shop d·ª±a tr√™n id_shop
        if (product.id_shop) {
            try {
                console.log(`üåê [API] L·∫•y t√™n shop t·ª´ id_shop: ${product.id_shop}`);

                // G·ªçi API v·ªõi ph∆∞∆°ng th·ª©c POST ƒë·ªÉ l·∫•y th√¥ng tin shop t·ª´ id_shop
                const response = await fetch(`http://14.225.206.60:3000/api/shops/get-shop-info/${product.id_shop}`, {
                    method: 'POST', // Th·ª±c hi·ªán POST thay v√¨ GET
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ id_shop: product.id_shop }) // G·ª≠i id_shop trong body (n·∫øu API y√™u c·∫ßu)
                });

                const shopData = await response.json();
                if (shopData && shopData.data) {
                    const shopName = shopData.data.ten_shop || 'Kh√¥ng x√°c ƒë·ªãnh';
                    document.getElementById('detailShopName').textContent = shopName;
                } else {
                    console.error("‚ö†Ô∏è [API] Kh√¥ng t√¨m th·∫•y th√¥ng tin shop.");
                    document.getElementById('detailShopName').textContent = "Kh√¥ng x√°c ƒë·ªãnh";
                }
            } catch (error) {
                console.error("‚ö†Ô∏è [L·ªói] Kh√¥ng th·ªÉ l·∫•y t√™n shop:", error);
                document.getElementById('detailShopName').textContent = "Kh√¥ng x√°c ƒë·ªãnh";
            }
        } else {
            document.getElementById('detailShopName').textContent = "Kh√¥ng x√°c ƒë·ªãnh";
        }

        // ·∫®n √¥ nh·∫≠p l√Ω do t·ª´ ch·ªëi v√† n√∫t g·ª≠i t·ª´ ch·ªëi khi m·ªü chi ti·∫øt s·∫£n ph·∫©m
        const rejectionReasonContainer = document.querySelector('.rejection-reason-container');
        rejectionReasonContainer.style.display = 'none';

        // Hi·ªÉn th·ªã panel chi ti·∫øt s·∫£n ph·∫©m
        detailPanel.style.display = 'block';
        console.log("‚úÖ [UI] Chi ti·∫øt s·∫£n ph·∫©m hi·ªÉn th·ªã th√†nh c√¥ng.");
    }



    // ============================
    // G·ª¨I TH√îNG B√ÅO
    // ============================
    async function sendNotification(userId, message) {
        const notificationData = {
            "id_user": userId,
            "noi_dung_thong_bao": message,
            "tieu_de": "Tr·∫°ng th√°i duy·ªát s·∫£n ph·∫©m"
        };

        try {
            const response = await fetch('http://14.225.206.60:3000/api/notifications/send-to-user', {
                method: 'POST',
                headers: {
                    Authorization: `Bearer ${bearerToken}`,
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(notificationData)
            });

            if (!response.ok) {
                throw new Error("Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o");
            }

            console.log("Th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!");
        } catch (error) {
            console.error("L·ªói khi g·ª≠i th√¥ng b√°o:", error);
        }
    }

    // ============================
    // X·ª¨ L√ù DUY·ªÜT S·∫¢N PH·∫®M
    // ============================
    document.getElementById('btnDuyet').addEventListener('click', async function () {
        const confirmation = confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën duy·ªát s·∫£n ph·∫©m n√†y?");
        if (confirmation) {
            const productId = document.querySelector('.detail-btn').dataset.id; // L·∫•y id s·∫£n ph·∫©m
            const product = allProducts.find(p => p._id === productId);
            const shopId = product.id_shop;

            // L·∫•y th√¥ng tin user (ID c·ªßa ch·ªß shop)
            const userResponse = await fetch(`http://14.225.206.60:3000/api/shops/owner/${shopId}`);
            const userData = await userResponse.json();
            const userId = userData.data._id;

            // G·ª≠i y√™u c·∫ßu PUT ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i s·∫£n ph·∫©m
            const updateResponse = await fetch(`http://14.225.206.60:3000/api/admin/books/${productId}/status`, {
                method: 'PUT',
                headers: {
                    'Authorization': `Bearer ${bearerToken}`,
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ "trang_thai": true }), // C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh true
            });

            if (!updateResponse.ok) {
                console.error("‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i s·∫£n ph·∫©m!");
                return;
            }

            const updateData = await updateResponse.json();
            console.log("‚úÖ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i s·∫£n ph·∫©m th√†nh c√¥ng:", updateData);

            // G·ª≠i th√¥ng b√°o duy·ªát s·∫£n ph·∫©m
            const message = `S·∫£n ph·∫©m c√≥ t√™n ${product.ten_sach} c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c duy·ªát v√† c√≥ th·ªÉ ƒë∆∞·ª£c b√†y b√°n`;
            sendNotification(userId, message);

        }

        // ƒê√≥ng panel chi ti·∫øt s·∫£n ph·∫©m sau khi duy·ªát
        detailPanel.style.display = 'none'; // ·∫®n panel chi ti·∫øt s·∫£n ph·∫©m

        // G·ªçi API l·∫•y danh s√°ch s·∫£n ph·∫©m khi t·∫£i trang
        fetchProducts();
    });




    // ============================
    // X·ª¨ L√ù T·ª™ CH·ªêI DUY·ªÜT S·∫¢N PH·∫®M
    // ============================
    document.getElementById('btnKhongDuyet').addEventListener('click', function () {
        const rejectionReasonContainer = document.querySelector('.rejection-reason-container');
        rejectionReasonContainer.style.display = 'block'; // Hi·ªÉn th·ªã √¥ nh·∫≠p l√Ω do t·ª´ ch·ªëi

        document.querySelector('.rejection-reason-container button').addEventListener('click', async function () {
            const rejectionReason = document.querySelector('.rejection-reason-container textarea').value;
            if (!rejectionReason) {
                alert("Vui l√≤ng nh·∫≠p l√Ω do t·ª´ ch·ªëi.");
                return;
            }

            const confirmation = confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën t·ª´ ch·ªëi duy·ªát s·∫£n ph·∫©m n√†y?");
            if (confirmation) {
                const productId = document.querySelector('.detail-btn').dataset.id;
                const product = allProducts.find(p => p._id === productId);
                const shopId = product.id_shop;

                // L·∫•y th√¥ng tin user (ID c·ªßa ch·ªß shop)
                const userResponse = await fetch(`http://14.225.206.60:3000/api/shops/owner/${shopId}`);
                const userData = await userResponse.json();
                const userId = userData.data._id;

                // G·ª≠i th√¥ng b√°o t·ª´ ch·ªëi
                sendNotification(userId, rejectionReason);

                // G·ª≠i y√™u c·∫ßu x√≥a s·∫£n ph·∫©m (DELETE)
                const deleteResponse = await fetch(`http://14.225.206.60:3000/api/books/${productId}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${bearerToken}`,
                        'Content-Type': 'application/json',
                    },
                });

                if (!deleteResponse.ok) {
                    console.error("‚ùå Kh√¥ng th·ªÉ x√≥a s·∫£n ph·∫©m!");
                    return;
                }

                const deleteData = await deleteResponse.json();
                console.log("‚úÖ ƒê√£ x√≥a s·∫£n ph·∫©m th√†nh c√¥ng:", deleteData);

                // ƒê√≥ng panel chi ti·∫øt s·∫£n ph·∫©m
                detailPanel.style.display = 'none'; // ·∫®n panel chi ti·∫øt s·∫£n ph·∫©m

                // T·∫£i l·∫°i trang sau khi ƒë√≥ng panel v√† ho√†n t·∫•t c√°c b∆∞·ªõc
                window.location.reload(); // T·∫£i l·∫°i trang
            }
        });
    });


    // ============================
    // S·ª∞ KI·ªÜN ƒê√ìNG PANEL CHI TI·∫æT
    // ============================
    closeDetailBtn.addEventListener('click', function () {
        console.log("‚ùå [UI] ƒê√≥ng panel chi ti·∫øt s·∫£n ph·∫©m.");
        detailPanel.style.display = 'none';
    });


    // ============================
    // C·∫¨P NH·∫¨T GIAO DI·ªÜN PH√ÇN TRANG
    // ============================
    function updatePagination(pagination) {
        if (!pagination) {
            console.error("‚ö†Ô∏è Kh√¥ng c√≥ th√¥ng tin ph√¢n trang");
            return;
        }

        console.log(`üìÑ [UI] C·∫≠p nh·∫≠t giao di·ªán ph√¢n trang. Trang hi·ªán t·∫°i: ${currentPage} / ${pagination.total_pages}`);

        currentPageSpan.textContent = currentPage || 1; // Hi·ªÉn th·ªã trang hi·ªán t·∫°i (m·∫∑c ƒë·ªãnh 1 n·∫øu ch∆∞a x√°c ƒë·ªãnh)
        prevButton.disabled = currentPage <= 1; // Disable n√∫t "Quay l·∫°i" n·∫øu ·ªü trang 1
        nextButton.disabled = currentPage >= pagination.total_pages; // Disable n√∫t "Ti·∫øp theo" n·∫øu ·ªü trang cu·ªëi
    }


    // ============================
    // H√ÄM THAY ƒê·ªîI TRANG
    // ============================
    function changePage(direction) {
        console.log(`üîÑ [UI] Thay ƒë·ªïi trang: ${direction}`);

        if (direction === 'prev' && currentPage > 1) {
            currentPage--;
        } else if (direction === 'next' && currentPage < totalPages) {
            currentPage++;
        }

        // G·ªçi l·∫°i API v·ªõi trang m·ªõi
        fetchProducts();
    }


    // ============================
    // S·ª∞ KI·ªÜN CHUY·ªÇN TRANG
    // ============================
    prevButton.addEventListener('click', function () {
        changePage('prev'); // ƒêi·ªÅu ch·ªânh l·∫°i ƒë·ªÉ h√†m c√≥ th·ªÉ nh·∫≠n ƒë·ªëi s·ªë ch√≠nh x√°c
    });

    nextButton.addEventListener('click', function () {
        changePage('next'); // ƒêi·ªÅu ch·ªânh l·∫°i ƒë·ªÉ h√†m c√≥ th·ªÉ nh·∫≠n ƒë·ªëi s·ªë ch√≠nh x√°c
    });



    // ============================
    // H√ÄM T√åM KI·∫æM S√ÅCH THEO T√äN
    // ============================
    function searchProducts() {
        const keyword = searchInput.value.trim().toLowerCase();
        console.log(`üîé [T√¨m ki·∫øm] T·ª´ kh√≥a: "${keyword}"`);

        const filteredProducts = allProducts.filter(product =>
            product.ten_sach.toLowerCase().includes(keyword)
        );

        renderProducts(filteredProducts);
    }

    // ============================
    // S·ª∞ KI·ªÜN T√åM KI·∫æM S·∫¢N PH·∫®M
    // ============================
    searchButton.addEventListener('click', searchProducts);
    searchInput.addEventListener('input', searchProducts); // T√¨m ki·∫øm theo th·ªùi gian th·ª±c

    // G·ªçi API l·∫•y danh s√°ch s·∫£n ph·∫©m khi t·∫£i trang
    fetchProducts();
});
